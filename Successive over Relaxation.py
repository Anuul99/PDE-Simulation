# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uVJaoNvwq7QgsDeIKzxILyMdyKXjMze7
"""

import numpy as np  
import matplotlib.pyplot as plt  
g = 9.81  
dx = dy = 1.  
alpha = 0.7  
len_x = 100.  
len_y = 100.  
grid_x = int(len_x/dx)  
grid_y = int(len_y/dy)  
x = np.linspace(0.,grid_x*dx,grid_x)  
y = np.linspace(0.,grid_y*dy,grid_y)  
T = np.zeros((grid_y,grid_x))  
T[:,0] = 0.  
T[:,-1] = 0.  
T[0,:] = 0.  
T[-1,:] = 0.  
T[0,25:75] = 50.  
w = 1.6  
for k in range(0,nk):  
    for j in range(1,grid_y-1):  
        for i in range(1,grid_x-1):  
            R = 0.25*(T[j,i+1]+T[j,i-1]+T[j+1,i]+T[j-1,i]-g/alpha*dx**2.)  
            T[j,i] = (1-w)*T[j,i]+w*R  
plt.contourf(x,y,T,cmap='rainbow',levels=np.linspace(np.min(T),np.max(T),30))  
plt.colorbar()  
plt.show()  
T = np.zeros((grid_y,grid_x))  
T[:,0] = 0.  
T[:,-1] = 0.  
T[0,:] = 0.  
T[-1,:] = 0.  
T[0,25:75] = 50.  
w = 1.9 #Corresponding to omega in the SOR algorithm.  
nk = 1000 #Corresponds to the number of iterations.  
icounter = 0  
for k in range(0,1000):  
    for j in range(1,grid_y-1):  
        for i in range(1,grid_x-1):  
            if (k == 0)&(j < 50)&(i < 50): #Only see the effect for one iteration and loop of i and j less than 50.  
                plt.clf()  
                plt.cla()  
                plt.contourf(x,y,T,cmap='rainbow',levels=np.linspace(-3.,51.,30))  
                plt.colorbar()  
                plt.title('k=%04.4i i=%03.3i j=%03.3i'%(k,i,j))  
                plt.savefig('%06.6i.png'%(icounter))  
                icounter += 1  
            R = 0.25*(T[j,i+1]+T[j,i-1]+T[j+1,i]+T[j-1,i]+g/alpha*RhoT*dx**2.)-T[j,i]  
            T[j,i] = T[j,i]+w*R